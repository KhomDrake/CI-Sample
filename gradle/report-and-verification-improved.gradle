apply plugin: 'jacoco'

tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses true
    jacoco.excludes = ['jdk.internal.*']
}

def createReportTask(
    Object variant,
    Object variantName,
    Object unitTestTask,
    Object uiTestTask,
    Object buildDirectoryPath,
    Object excludes,
    Object coverageSourceDirs,
    Object unitTestFile,
    Object uiTestFilesPath
) {

    // registering the test coverage task for this variant
    tasks.register(
            "${variantName}TestCoverage",
            // task of type jacoco report
            JacocoReport
    ) {
        dependsOn("$unitTestTask", "$uiTestTask")

        // Group where this task should be
        group = "Reporting"
        // Description of the task
        description = "Generate Jacoco coverage reports on the ${variantName.capitalize()} build."

        // config report
        reports {
            html {
                // enable html report
                // Android studio recommend to use enabled = true, but build fails and only works
                // using setEnabled
                setEnabled(true)
                // Where the html coverage file will be available after the task ends
                destination file("${buildDirectoryPath}/coverage-report/${variantName}")
            }
            xml {
                // disabling xml report
                setEnabled(false)
            }
            csv {
                // enabling csv report
                // for some mysterious reason, I have to enable csv report to generate the unified report
                setEnabled(true)
            }
        }


        // getting all the java classes
        def javaClasses = fileTree(dir: variant.javaCompileProvider.get().destinationDir,
                excludes: excludes)
        // getting all the kotlin classes
        def kotlinClasses = fileTree(dir: "${buildDirectoryPath}/tmp/kotlin-classes/${variantName}",
                excludes: excludes)

        // setting the class directories
        classDirectories.setFrom(files([javaClasses, kotlinClasses]))

        // setting coverage folders
        additionalSourceDirs.setFrom(files(coverageSourceDirs))
        sourceDirectories.setFrom(files(coverageSourceDirs))

        def uiTestsData = fileTree(
                dir: uiTestFilesPath,
                includes: ["**/*.ec"]
        )

        // create a list with the Unit Test coverage file
        def coverageFiles = [unitTestFile]

        // add all the UI Test coverage file
        coverageFiles.addAll(uiTestsData.files)

        // adding the coverage file to jacoco
        executionData.from = coverageFiles
    }
}

def createVerificationTask(
        Object variant,
        Object variantName,
        Object buildDirectoryPath,
        Object excludes,
        Object coverageSourceDirs,
        Object unitTestFile,
        Object uiTestFilesPath,
        Object minPercentage
) {

    tasks.register(
            "${variantName}CoverageVerification",
            JacocoCoverageVerification
    ) {
        dependsOn("${variantName}TestCoverage")

        // Group where this task should be
        group = "Reporting"
        // Description of the task
        description = "Validates code coverage for ${variantName.capitalize()} build."

        violationRules {
            rule {
                limit {
                    minimum = minPercentage
                }
            }
        }

        def javaClasses = fileTree(dir: variant.javaCompileProvider.get().destinationDir,
                excludes: excludes)

        def kotlinClasses = fileTree(dir: "${buildDirectoryPath}/tmp/kotlin-classes/${variantName}",
                excludes: excludes)

        classDirectories.setFrom(files([javaClasses, kotlinClasses]))

        additionalSourceDirs.setFrom(files(coverageSourceDirs))
        sourceDirectories.setFrom(files(coverageSourceDirs))

        def uiTestsData = fileTree(
                dir: uiTestFilesPath,
                includes: ["**/*.ec"]
        )

        def coverageFiles = [unitTestFile]

        coverageFiles.addAll(uiTestsData.files)

        executionData.from = coverageFiles

    }
}

project.afterEvaluate {

    // getting all the project variants
    (android.hasProperty('applicationVariants')
            ? android.'applicationVariants'
            : android.'libraryVariants').all { variant ->


        def variantName = variant.name

        def unitTestTask = "test${variantName.capitalize()}UnitTest"

        def uiTestTask = "connected${variantName.capitalize()}AndroidTest"

        def buildDirectoryPath = layout.buildDirectory.dir(".").get().asFile

        def excludes = [
                '**/util/Cache.*',
                '**/util/DiskVault*.*',
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                '**/android/databinding/*',
                '**/androidx/databinding/*',
                '**/di/module/*',
                '**/*MapperImpl*.*',
                '**/*$ViewInjector*.*',
                '**/*$ViewBinder*.*',
                '**/BuildConfig.*',
                '**/*Component*.*',
                '**/*BR*.*',
                '**/Manifest*.*',
                '**/*$Lambda$*.*',
                '**/*Companion*.*',
                '**/*Module.*',
                '**/*Dagger*.*',
                '**/*MembersInjector*.*',
                '**/*_Factory*.*',
                '**/*_Provide*Factory*.*',
                '**/*Extensions*.*',
                '**/*$Result.*',
                '**/*$Result$*.*',
                '**/*Args*.*',
                '**/*Directions*.*'
        ]

        def coverageSourceDirs = [
                "${project.rootDir}/app/src/main/java",
                "${project.projectDir}/src/${variantName}/java",
                "${project.rootDir}/app/src/main/kotlin",
                "${project.projectDir}/src/${variantName}/kotlin",
        ]

        def unitTestFile =  "${buildDirectoryPath}/outputs/unit_test_code_coverage/${variantName}UnitTest/${unitTestTask}.exec"

        def uiTestFilesPath = "${buildDirectoryPath}/outputs/code_coverage/${variantName}AndroidTest/connected/"

        def defaultThreshold = .80

        def threshold = project.hasProperty("coverageThreshold")
                ? project.coverageThreshold
                : defaultThreshold

        createReportTask(
            variant,
            variantName,
            unitTestTask,
            uiTestTask,
            buildDirectoryPath,
            excludes,
            coverageSourceDirs,
            unitTestFile,
            uiTestFilesPath
        )
        createVerificationTask(
            variant,
            variantName,
            buildDirectoryPath,
            excludes,
            coverageSourceDirs,
            unitTestFile,
            uiTestFilesPath,
            threshold
        )
    }

}